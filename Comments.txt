
Абстр. класс Auto:
	Решил сделать абстрактный класс, выделив в нем общую сущность "будущих автомобилей"
	для объединения будущих объектов класса общим предком и 
	=> соблюдению принципа open-closed
	
прим. Наполнение класса помимо указанного в задаче, создано просто для наглядности отображения в интерфейсе

Марки машин хранятся в классе enum, в рамках поставленной задачи, это релевантное решение,
	но для приложения приближенного к реальной б-задаче, для каждой марки автомобиля я бы
	создавал свой интерфейс	чтобы дальнейшие классы-наследники содержали только нужную
	(уникальную) для него функциональность (декомпозиция интерфейсов)

Интерфейс IAddition сделан исключительно для объдинения объектов Additions в общую коллекцию 
	по интерфейсной ссылке и последующего их назначения объекту автомобиля.

Создан статический класс CatalogAdditionals для хранения объектов "допов" (нам не нужно создавать
	объекты этого класса, а допы для каждого автомобиля могут быть одни и те же, только в разном
	количестве). у класса Auto есть приватная коллекция допов(инициализируется при моздании объекта 
	класса-потомка) и метод AddAddition.

Алгоритм рандомного создания авто и добавления к ним рандомного количества "допов" описан в Programm

В MailRepo:	   Client - хранит контактную инфу клиента (private email) 
		   ClientList - упрощенно показано как можно хранить объекты класса Client Dict<> 
				использован для более быстрого поиска. Также сожержит методы получения фио 
				клиента по email и наоборот
		   MailG - Класс с настройками sntp клиента и данными отправителя(компании), 
			   в конструкторе класса инициализируется сам объект письма с необходимыми данными
			   и настройками (Для примера использована настройка sntp для Gmail).
			   после создания объекта письма у него можно вызвать метод send для отправки.
			   работа рассылки работает корректно.

				   


